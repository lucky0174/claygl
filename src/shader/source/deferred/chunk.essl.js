define(function () {
return "@export qtek.deferred.chunk.light_head\n\nuniform sampler2D gBufferTexture;\n\nuniform sampler2D depthTexture;\n\nuniform vec2 viewportSize: VIEWPORT_SIZE;\n\nuniform mat4 viewProjectionInv;\n\nconst vec3 LUM = vec3(0.2125, 0.7154, 0.0721);\n\n\n#ifdef DEPTH_ENCODED\n@import qtek.util.decode_float\n#endif\n\n@end\n\n@export qtek.deferred.chunk.gbuffer_read\n    vec2 uv = gl_FragCoord.xy / viewportSize;\n\n    vec4 texel = texture2D(gBufferTexture, uv);\n    // Is empty\n    if (dot(texel.rgb, vec3(1.0)) == 0.0) {\n        discard;\n    }\n\n    float glossiness = texel.b;\n    float metalness = texel.a * 2.0 - 1.0;\n\n    vec3 N;\n    N.rg = texel.rg * 2.0 - 1.0;\n    N.b = sign(metalness) * sqrt(1.0 - dot(N.xy, N.xy));\n\n    metalness = abs(metalness);\n\n#ifdef DEPTH_ENCODED\n    vec4 depthTexel = texture2D(depthTexture, uv);\n\n// FXIME premultiplied alpha when blend is enabled?\n// FIXME Mobile and PC are different(mobile don't need it)\n#ifdef PREMULTIPLIED_ALPHA\n    depthTexel.rgb /= depthTexel.a;\n#endif\n    float z = decodeFloat(depthTexel) * 2.0 - 1.0;\n#else\n    // Depth buffer range is 0.0 - 1.0\n    float z = texture2D(depthTexture, uv).r * 2.0 - 1.0;\n#endif\n\n    vec2 xy = uv * 2.0 - 1.0;\n\n    vec4 projectedPos = vec4(xy, z, 1.0);\n    vec4 p4 = viewProjectionInv * projectedPos;\n\n    vec3 position = p4.xyz / p4.w;\n@end\n\n@export qtek.deferred.chunk.light_equation\n\nfloat D_Phong(float g, float ndh) {\n    // from black ops 2\n    float a = pow(8192.0, g);\n    return (a + 2.0) / 8.0 * pow(ndh, a);\n}\n\n@end";
});