@export qtek.deferred.chunk.light_head

uniform sampler2D gBufferTexture;

uniform sampler2D depthTexture;

uniform vec2 viewportSize: VIEWPORT_SIZE;

uniform mat4 viewProjectionInv;

const vec3 LUM = vec3(0.2125, 0.7154, 0.0721);


#ifdef DEPTH_ENCODED
@import qtek.util.decode_float
#endif

@end

@export qtek.deferred.chunk.gbuffer_read
    vec2 uv = gl_FragCoord.xy / viewportSize;

    vec4 texel = texture2D(gBufferTexture, uv);
    // Is empty
    if (dot(texel.rgb, vec3(1.0)) == 0.0) {
        discard;
    }

    float glossiness = texel.b;
    float metalness = texel.a * 2.0 - 1.0;

    vec3 N;
    N.rg = texel.rg * 2.0 - 1.0;
    N.b = sign(metalness) * sqrt(1.0 - dot(N.xy, N.xy));

    metalness = abs(metalness);

#ifdef DEPTH_ENCODED
    vec4 depthTexel = texture2D(depthTexture, uv);

// FXIME premultiplied alpha when blend is enabled?
// FIXME Mobile and PC are different(mobile don't need it)
#ifdef PREMULTIPLIED_ALPHA
    depthTexel.rgb /= depthTexel.a;
#endif
    float z = decodeFloat(depthTexel) * 2.0 - 1.0;
#else
    // Depth buffer range is 0.0 - 1.0
    float z = texture2D(depthTexture, uv).r * 2.0 - 1.0;
#endif

    vec2 xy = uv * 2.0 - 1.0;

    vec4 projectedPos = vec4(xy, z, 1.0);
    vec4 p4 = viewProjectionInv * projectedPos;

    vec3 position = p4.xyz / p4.w;
@end

@export qtek.deferred.chunk.light_equation

float D_Phong(float g, float ndh) {
    // from black ops 2
    float a = pow(8192.0, g);
    return (a + 2.0) / 8.0 * pow(ndh, a);
}

@end