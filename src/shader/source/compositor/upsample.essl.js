define(function () {
return "// https://github.com/keijiro/KinoBloom/blob/master/Assets/Kino/Bloom/Shader/Bloom.cginc#L96\n\n@export qtek.compositor.upsample\n\n#define HIGH_QUALITY\n\nuniform sampler2D texture;\nuniform vec2 textureSize : [512, 512];\n\nvarying vec2 v_Texcoord;\n\n@import qtek.util.rgbm\n\nvoid main()\n{\n\n#ifdef HIGH_QUALITY\n    // 9-tap bilinear upsampler (tent filter)\n    vec4 d = vec4(1.0, 1.0, -1.0, 0.0) / textureSize.xyxy;\n\n    vec4 s;\n    s  = decodeHDR(texture2D(texture, v_Texcoord - d.xy));\n    s += decodeHDR(texture2D(texture, v_Texcoord - d.wy)) * 2.0;\n    s += decodeHDR(texture2D(texture, v_Texcoord - d.zy));\n\n    s += decodeHDR(texture2D(texture, v_Texcoord + d.zw)) * 2.0;\n    s += decodeHDR(texture2D(texture, v_Texcoord       )) * 4.0;\n    s += decodeHDR(texture2D(texture, v_Texcoord + d.xw)) * 2.0;\n\n    s += decodeHDR(texture2D(texture, v_Texcoord + d.zy));\n    s += decodeHDR(texture2D(texture, v_Texcoord + d.wy)) * 2.0;\n    s += decodeHDR(texture2D(texture, v_Texcoord + d.xy));\n\n    gl_FragColor = encodeHDR(s / 16.0);\n#else\n    // 4-tap bilinear upsampler\n    vec4 d = vec4(-1.0, -1.0, +1.0, +1.0) / textureSize.xyxy;\n\n    vec4 s;\n    s  = decodeHDR(texture2D(texture, v_Texcoord + d.xy));\n    s += decodeHDR(texture2D(texture, v_Texcoord + d.zy));\n    s += decodeHDR(texture2D(texture, v_Texcoord + d.xw));\n    s += decodeHDR(texture2D(texture, v_Texcoord + d.zw));\n\n    gl_FragColor = encodeHDR(s / 4.0);\n#endif\n}\n\n@end";
});