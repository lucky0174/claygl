define(function () {
return "@export qtek.compositor.kernel.gaussian_9\n// http://dev.theomader.com/gaussian-kernel-calculator/\n// array constructor supported in GLSL ES 3.00 only\nfloat gaussianKernel[9];\ngaussianKernel[0] = 0.05;\ngaussianKernel[1] = 0.09;\ngaussianKernel[2] = 0.12;\ngaussianKernel[3] = 0.15;\ngaussianKernel[4] = 0.18;\ngaussianKernel[5] = 0.15;\ngaussianKernel[6] = 0.12;\ngaussianKernel[7] = 0.09;\ngaussianKernel[7] = 0.05;\n\n@end\n\n@export qtek.compositor.util.sample\n\n@import qtek.util.rgbm\n/* switch to pre-multiplied alpha to correctly blur transparent images */\n// PENDING\nvec4 sample(const in sampler2D texture, const in vec2 coord)\n{\n    vec4 tex = decodeHDR(texture2D(texture, coord));\n    // tex.rgb *= tex.a;\n    return tex;\n}\n@end\n\n@export qtek.compositor.gaussian_blur_h\n\nuniform sampler2D texture; // the texture with the scene you want to blur\nvarying vec2 v_Texcoord;\n\nuniform float blurSize : 2.0;\nuniform float textureWidth : 512.0;\n\n@import qtek.compositor.util.sample\n\nvoid main (void)\n{\n    @import qtek.compositor.kernel.gaussian_9\n\n    float off = blurSize / textureWidth;\n\n    vec4 sum = vec4(0.0);\n    float weightAll = 0.0;\n\n    // blur in y (horizontal)\n    for (int i = 0; i < 9; i++) {\n        vec2 coord = vec2(clamp(v_Texcoord.x + (float(i) - 4.0) * off, 0.0, 1.0), v_Texcoord.y);\n        float w = gaussianKernel[i];\n        sum += decodeHDR(texture2D(texture, coord)) * w;\n        weightAll += w;\n    }\n\n    // sum.rgb /= sum.a + 0.0000001;\n\n    gl_FragColor = encodeHDR(sum / weightAll);\n}\n\n@end\n\n@export qtek.compositor.gaussian_blur_v\n\nuniform sampler2D texture;\nvarying vec2 v_Texcoord;\n\nuniform float blurSize : 2.0;\nuniform float textureHeight : 512.0;\n\n@import qtek.compositor.util.sample\n\nvoid main(void)\n{\n    @import qtek.compositor.kernel.gaussian_9\n\n    float off = blurSize / textureHeight;\n\n    vec4 sum = vec4(0.0);\n    float weightAll = 0.0;\n\n    // blur in y (vertical)\n    for (int i = 0; i < 9; i++) {\n        vec2 coord = vec2(v_Texcoord.x, clamp(v_Texcoord.y + (float(i) - 4.0) * off, 0.0, 1.0));\n        float w = gaussianKernel[i];\n        sum += decodeHDR(texture2D(texture, coord)) * w;\n        weightAll += w;\n    }\n\n    // sum.rgb /= sum.a + 0.0000001;\n\n    gl_FragColor = encodeHDR(sum / weightAll);\n}\n\n@end\n\n@export qtek.compositor.box_blur\n\nuniform sampler2D texture;\nvarying vec2 v_Texcoord;\n\nuniform float blurSize : 3.0;\nuniform vec2 textureSize : [512.0, 512.0];\n\n@import qtek.compositor.util.sample\n\nvoid main(void)\n{\n\n    vec4 tex = texture2D(texture, v_Texcoord);\n    vec2 offset = blurSize / textureSize;\n\n    tex += sample(texture, v_Texcoord + vec2(offset.x, 0.0) );\n    tex += sample(texture, v_Texcoord + vec2(offset.x, offset.y) );\n    tex += sample(texture, v_Texcoord + vec2(-offset.x, offset.y) );\n    tex += sample(texture, v_Texcoord + vec2(0.0, offset.y) );\n    tex += sample(texture, v_Texcoord + vec2(-offset.x, 0.0) );\n    tex += sample(texture, v_Texcoord + vec2(-offset.x, -offset.y) );\n    tex += sample(texture, v_Texcoord + vec2(offset.x, -offset.y) );\n    tex += sample(texture, v_Texcoord + vec2(0.0, -offset.y) );\n\n    tex /= 9.0;\n\n    // tex.rgb /= tex.a + 0.0000001;\n\n    gl_FragColor = encodeHDR(tex);\n}\n\n@end\n\n\n\n\n\n// http://www.slideshare.net/DICEStudio/five-rendering-ideas-from-battlefield-3-need-for-speed-the-run\n@export qtek.compositor.hexagonal_blur_mrt_1\n\n// MRT in chrome\n// https://www.khronos.org/registry/webgl/sdk/tests/conformance/extensions/webgl-draw-buffers.html\n#extension GL_EXT_draw_buffers : require\n\nuniform sampler2D texture;\nvarying vec2 v_Texcoord;\n\nuniform float blurSize : 2.0;\n\nuniform vec2 textureSize : [512.0, 512.0];\n\nvoid main(void){\n    vec2 offset = blurSize / textureSize;\n\n    vec4 color = vec4(0.0);\n    // Top\n    for(int i = 0; i < 10; i++){\n        color += 1.0/10.0 * texture2D(texture, v_Texcoord + vec2(0.0, offset.y * float(i)) );\n    }\n    gl_FragData[0] = color;\n    vec4 color2 = vec4(0.0);\n    // Down left\n    for(int i = 0; i < 10; i++){\n        color2 += 1.0/10.0 * texture2D(texture, v_Texcoord - vec2(offset.x * float(i), offset.y * float(i)) );\n    }\n    gl_FragData[1] = (color + color2) / 2.0;\n}\n\n@end\n\n@export qtek.compositor.hexagonal_blur_mrt_2\n\nuniform sampler2D texture0;\nuniform sampler2D texture1;\n\nvarying vec2 v_Texcoord;\n\nuniform float blurSize : 2.0;\n\nuniform vec2 textureSize : [512.0, 512.0];\n\nvoid main(void){\n    vec2 offset = blurSize / textureSize;\n\n    vec4 color1 = vec4(0.0);\n    // Down left\n    for(int i = 0; i < 10; i++){\n        color1 += 1.0/10.0 * texture2D(texture0, v_Texcoord - vec2(offset.x * float(i), offset.y * float(i)) );\n    }\n    vec4 color2 = vec4(0.0);\n    // Down right\n    for(int i = 0; i < 10; i++){\n        color2 += 1.0/10.0 * texture2D(texture1, v_Texcoord + vec2(offset.x * float(i), -offset.y * float(i)) );\n    }\n\n    gl_FragColor = (color1 + color2) / 2.0;\n}\n\n@end\n\n\n@export qtek.compositor.hexagonal_blur_1\n\n#define KERNEL_SIZE 10\n\nuniform sampler2D texture;\nvarying vec2 v_Texcoord;\n\nuniform float blurSize : 1.0;\n\nuniform vec2 textureSize : [512.0, 512.0];\n\n@import qtek.util.rgbm\n\nvoid main(void){\n    vec2 offset = blurSize / textureSize;\n\n    vec4 color = vec4(0.0);\n    // Top\n    for(int i = 0; i < KERNEL_SIZE; i++){\n        vec2 coord = v_Texcoord + vec2(0.0, offset.y * float(i));\n        color += decodeHDR(texture2D(texture, coord));\n    }\n    gl_FragColor = encodeHDR(color / float(KERNEL_SIZE));\n}\n\n@end\n\n@export qtek.compositor.hexagonal_blur_2\n\n#define KERNEL_SIZE 10\n\nuniform sampler2D texture;\nvarying vec2 v_Texcoord;\n\nuniform float blurSize : 1.0;\n\nuniform vec2 textureSize : [512.0, 512.0];\n\n@import qtek.util.rgbm\n\nvoid main(void){\n    vec2 offset = blurSize / textureSize;\n    offset.y /= 2.0;\n\n    vec4 color = vec4(0.0);\n    // Down left\n    for(int i = 0; i < KERNEL_SIZE; i++){\n        vec2 coord = v_Texcoord - offset * float(i);\n        color += decodeHDR(texture2D(texture, coord));\n    }\n    gl_FragColor = encodeHDR(color / float(KERNEL_SIZE));\n}\n@end\n\n@export qtek.compositor.hexagonal_blur_3\n\n#define KERNEL_SIZE 10\n\nuniform sampler2D texture1;\nuniform sampler2D texture2;\n\nvarying vec2 v_Texcoord;\n\nuniform float blurSize : 1.0;\n\nuniform vec2 textureSize : [512.0, 512.0];\n\n@import qtek.util.rgbm\n\nvoid main(void){\n    vec2 offset = blurSize / textureSize;\n    offset.y /= 2.0;\n\n    vec4 color1 = vec4(0.0);\n    // Down left\n    for(int i = 0; i < KERNEL_SIZE; i++){\n        vec2 coord = v_Texcoord - offset * float(i);\n        color1 += decodeHDR(texture2D(texture1, coord));\n    }\n    vec4 color2 = vec4(0.0);\n\n    vec2 vDownRight = vec2(offset.x, -offset.y);\n    // Down right\n    for(int i = 0; i < KERNEL_SIZE; i++){\n        vec2 coord = v_Texcoord + vDownRight * float(i);\n        color2 += decodeHDR(texture2D(texture1, coord));\n    }\n\n    vec4 color3 = vec4(0.0);\n    // Down right\n    for(int i = 0; i < KERNEL_SIZE; i++){\n        vec2 coord = v_Texcoord + vDownRight * float(i);\n        color3 += decodeHDR(texture2D(texture2, coord));\n    }\n\n    gl_FragColor = encodeHDR((color1 + color2 + color3) / 3.0 / float(KERNEL_SIZE));\n}\n\n@end";
});