// HDR Pipeline
@export qtek.compositor.hdr.bright

uniform sampler2D texture;

uniform float threshold : 1;
uniform float scale : 1.0;

varying vec2 v_Texcoord;

const vec3 lumWeight = vec3(0.2125, 0.7154, 0.0721);

@import qtek.util.rgbm

void main()
{
    vec3 tex = decodeHDR(texture2D(texture, v_Texcoord)).rgb;

    float lum = dot(tex, lumWeight);
    if (lum > threshold)
    {
        gl_FragColor.rgb = tex * scale;
    }
    else
    {
        gl_FragColor.rgb = vec3(0.0);
    }
    gl_FragColor.a = 1.0;

    gl_FragColor = encodeHDR(gl_FragColor);
}
@end

@export qtek.compositor.hdr.log_lum

varying vec2 v_Texcoord;

uniform sampler2D texture;

const vec3 w = vec3(0.2125, 0.7154, 0.0721);

@import qtek.util.rgbm

void main()
{
    vec4 tex = decodeHDR(texture2D(texture, v_Texcoord));
    float luminance = dot(tex.rgb, w);
    luminance = log(luminance + 0.001);

    gl_FragColor = encodeHDR(vec4(vec3(luminance), 1.0));
}

@end

@export qtek.compositor.hdr.lum_adaption
varying vec2 v_Texcoord;

uniform sampler2D adaptedLum;
uniform sampler2D currentLum;

uniform float frameTime : 0.02;

@import qtek.util.rgbm

void main()
{
    float fAdaptedLum = decodeHDR(texture2D(adaptedLum, vec2(0.5, 0.5))).r;
    float fCurrentLum = exp(encodeHDR(texture2D(currentLum, vec2(0.5, 0.5))).r);

    fAdaptedLum += (fCurrentLum - fAdaptedLum) * (1.0 - pow(0.98, 30.0 * frameTime));
    gl_FragColor = encodeHDR(vec4(vec3(fAdaptedLum), 1.0));
}
@end

// Tone mapping with gamma correction
// http://filmicgames.com/archives/75
@export qtek.compositor.hdr.tonemapping

uniform sampler2D texture;
uniform sampler2D bloom;
uniform sampler2D lensflare;

uniform sampler2D lum;

uniform float exposure : 1.0;
uniform float bloomIntensity : 0.25;

varying vec2 v_Texcoord;

uniform float A : 0.22;   // Shoulder Strength
uniform float B : 0.30;   // Linear Strength
uniform float C : 0.10;   // Linear Angle
uniform float D : 0.20;   // Toe Strength
uniform float E : 0.01;   // Toe Numerator
uniform float F : 0.30;   // Toe Denominator

const vec3 whiteScale = vec3(11.2);

vec3 uncharted2ToneMap(vec3 x)
{
    return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;
}

vec3 filmicToneMap(vec3 color)
{
    vec3 x = max(vec3(0.0), color - 0.004);
    return (x*(6.2*x+0.5))/(x*(6.2*x+1.7)+0.06);
}

float eyeAdaption(float fLum)
{
    return mix(0.2, fLum, 0.5);
}

@import qtek.util.rgbm

void main()
{
    vec3 tex = vec3(0.0);
    float a = 1.0;
#ifdef TEXTURE_ENABLED
    vec4 res = decodeHDR(texture2D(texture, v_Texcoord));
    a = res.a;
    tex = res.rgb;
#endif

#ifdef BLOOM_ENABLED
    tex += decodeHDR(texture2D(bloom, v_Texcoord)).rgb * bloomIntensity;
#endif

#ifdef LENSFLARE_ENABLED
    tex += decodeHDR(texture2D(lensflare, v_Texcoord)).rgb;
#endif

// Adjust exposure
// From KlayGE
#ifdef LUM_ENABLED
    float fLum = texture2D(lum, vec2(0.5, 0.5)).r;
    float adaptedLumDest = 3.0 / (max(0.1, 1.0 + 10.0*eyeAdaption(fLum)));
    float exposureBias = adaptedLumDest * exposure;
#else
    float exposureBias = exposure;
#endif
    tex *= exposureBias;

    // Tone mapping
    vec3 color = uncharted2ToneMap(tex) / uncharted2ToneMap(whiteScale);
    // vec3 color = filmicToneMap(tex);
    color = pow(color, vec3(1.0 / 2.2));

    gl_FragColor = encodeHDR(vec4(color, a));

#ifdef DEBUG
    // Debug output original
    #if DEBUG == 1
    gl_FragColor = encodeHDR(decodeHDR(texture2D(texture, v_Texcoord)));
    // Debug output bloom
    #elif DEBUG == 2
    gl_FragColor = encodeHDR(decodeHDR(texture2D(bloom, v_Texcoord)).rgb * bloomIntensity);
    // Debug output lensflare
    #elif DEBUG == 3
    gl_FragColor = encodeHDR(decodeHDR(texture2D(lensflare, v_Texcoord)));
    #endif
#endif
}

@end