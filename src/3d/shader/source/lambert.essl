/**
 * http://en.wikipedia.org/wiki/Lambertian_reflectance
 */

@export buildin.lambert.vertex

uniform mat4 worldViewProjection : WORLDVIEWPROJECTION;
uniform mat4 worldInverseTranspose : WORLDINVERSETRANSPOSE;
uniform mat4 world : WORLD;

uniform vec2 uvRepeat : [1.0, 1.0];

attribute vec3 position : POSITION;
attribute vec2 texcoord : TEXCOORD_0;
attribute vec3 normal : NORMAL;

attribute vec3 barycentric;

#ifdef SKINNING
attribute vec3 boneWeight;
attribute vec4 boneIndex;

uniform mat4 boneMatrices[ BONE_MATRICES_NUMBER ];
#endif

varying vec2 v_Texcoord;
varying vec3 v_Normal;
varying vec3 v_WorldPosition;
varying vec3 v_Barycentric;

void main(){

    vec3 skinnedPosition = position;
    #ifdef SKINNING
        mat4 skinMatrix;
        if(boneIndex.x >= 0.0){
            skinMatrix = boneMatrices[int(boneIndex.x)] * boneWeight.x;
        }
        if(boneIndex.y >= 0.0){
            skinMatrix += boneMatrices[int(boneIndex.y)] * boneWeight.y;
        }
        if(boneIndex.z >= 0.0){
            skinMatrix += boneMatrices[int(boneIndex.z)] * boneWeight.z;
        }
        if(boneIndex.w >= 0.0){
            skinMatrix += boneMatrices[int(boneIndex.w)] * (1.0-boneWeight.x-boneWeight.y-boneWeight.z);
        }
        skinnedPosition = (skinMatrix * vec4(position, 1.0)).xyz;

        skinnedNormal = (skinMatrix * vec4(normal, 0.0)).xyz;
        skinnedTangent = (skinMatrix * vec4(tangent.xyz, 0.0)).xyz;
    #endif

    gl_Position = worldViewProjection * vec4( skinnedPosition, 1.0 );

    v_Texcoord = texcoord * uvRepeat;
    v_Normal = normalize( ( worldInverseTranspose * vec4(normal, 0.0) ).xyz );
    v_WorldPosition = ( world * vec4( skinnedPosition, 1.0) ).xyz;

    v_Barycentric = barycentric;
}

@end




@export buildin.lambert.fragment

varying vec2 v_Texcoord;
varying vec3 v_Normal;
varying vec3 v_WorldPosition;

uniform sampler2D diffuseMap;

uniform vec3 color : [1.0, 1.0, 1.0];
uniform float alpha : 1.0;

// Uniforms for wireframe
uniform float lineWidth : 0.0;
uniform vec3 lineColor : [0.0, 0.0, 0.0];
varying vec3 v_Barycentric;

#ifdef AMBIENT_LIGHT_NUMBER
@import buildin.header.ambient_light
#endif
#ifdef POINT_LIGHT_NUMBER
@import buildin.header.point_light
#endif
#ifdef DIRECTIONAL_LIGHT_NUMBER
@import buildin.header.directional_light
#endif
#ifdef SPOT_LIGHT_NUMBER
@import buildin.header.spot_light
#endif

#extension GL_OES_standard_derivatives : enable
// Import util functions and uniforms needed
@import buildin.util.calculate_attenuation

@import buildin.util.edge_factor

@import buildin.plugin.compute_shadow_map

void main(){
    
    gl_FragColor = vec4(color, alpha);

    #ifdef DIFFUSEMAP_ENABLED
        vec4 tex = texture2D( diffuseMap, v_Texcoord );
        // http://freesdk.crydev.net/display/SDKDOC3/Specular+Maps
        gl_FragColor.rgb *= tex.rgb;
    #endif

    vec3 diffuseColor = vec3(0.0, 0.0, 0.0);
    
    #ifdef AMBIENT_LIGHT_NUMBER
        for(int i = 0; i < AMBIENT_LIGHT_NUMBER; i++){
            diffuseColor += ambientLightColor[i];
        }
    #endif
    // Compute point light color
    #ifdef POINT_LIGHT_NUMBER
        #if defined(POINT_LIGHT_SHADOWMAP_NUMBER)
            float shadowFallOffs[POINT_LIGHT_NUMBER];
            if( shadowEnabled ){
                computeShadowFallOfPointLights( v_WorldPosition, shadowFallOffs );
            }
        #endif
        for(int i = 0; i < POINT_LIGHT_NUMBER; i++){

            vec3 lightPosition = pointLightPosition[i];
            vec3 lightColor = pointLightColor[i];
            float range = pointLightRange[i];

            vec3 lightDirection = lightPosition - v_WorldPosition;

            // Calculate point light attenuation
            float dist = length(lightDirection);
            float attenuation = calculateAttenuation(dist, range);

            // Normalize vectors
            lightDirection /= dist;

            float ndl = dot( v_Normal, lightDirection );

            float shadowFallOff = 1.0;
            #if defined(POINT_LIGHT_SHADOWMAP_NUMBER)
                if( shadowEnabled ){
                    shadowFallOff = shadowFallOffs[i];
                }
            #endif

            diffuseColor += lightColor * clamp(ndl, 0.0, 1.0) * attenuation * shadowFallOff;
        }
    #endif
    #ifdef DIRECTIONAL_LIGHT_NUMBER
        #if defined(DIRECTIONAL_LIGHT_SHADOWMAP_NUMBER)
            float shadowFallOffs[DIRECTIONAL_LIGHT_NUMBER];
            if( shadowEnabled ){
                computeShadowFallOfDirectionalLights( v_WorldPosition, shadowFallOffs );
            }
        #endif
        for(int i = 0; i < DIRECTIONAL_LIGHT_NUMBER; i++){
            vec3 lightDirection = -directionalLightDirection[i];
            vec3 lightColor = directionalLightColor[i];
            
            float ndl = dot( v_Normal, normalize( lightDirection ) );

            float shadowFallOff = 1.0;
            #if defined(DIRECTIONAL_LIGHT_SHADOWMAP_NUMBER)
                if( shadowEnabled ){
                    shadowFallOff = shadowFallOffs[i];
                }
            #endif

            diffuseColor += lightColor * clamp(ndl, 0.0, 1.0) * shadowFallOff;
        }
    #endif
    
    #ifdef SPOT_LIGHT_NUMBER
        #if defined(SPOT_LIGHT_SHADOWMAP_NUMBER)
            float shadowFallOffs[SPOT_LIGHT_NUMBER];
            if( shadowEnabled ){
                computeShadowFallOfSpotLights( v_WorldPosition, shadowFallOffs );
            }
        #endif
        for(int i = 0; i < SPOT_LIGHT_NUMBER; i++){
            vec3 lightPosition = -spotLightPosition[i];
            vec3 spotLightDirection = -normalize( spotLightDirection[i] );
            vec3 lightColor = spotLightColor[i];
            float range = spotLightRange[i];
            float umbraAngleCosine = spotLightUmbraAngleCosine[i];
            float penumbraAngleCosine = spotLightPenumbraAngleCosine[i];
            float falloffFactor = spotLightFalloffFactor[i];

            vec3 lightDirection = lightPosition - v_WorldPosition;
            // Calculate attenuation
            float dist = length(lightDirection);
            float attenuation = calculateAttenuation(dist, range); 

            // Normalize light direction
            lightDirection /= dist;
            // Calculate spot light fall off
            float lightDirectCosine = dot(spotLightDirection, lightDirection);

            float falloff;
            if( lightDirectCosine < penumbraAngleCosine ){
                falloff = 1.0;
            }else if( lightDirectCosine > umbraAngleCosine ){
                falloff = 0.0;
            }else{
                falloff = (lightDirectCosine-umbraAngleCosine)/(penumbraAngleCosine-umbraAngleCosine);
                falloff = pow(falloff, falloffFactor);
            }

            float ndl = dot( v_Normal, lightDirection );
            ndl = clamp(ndl, 0.0, 1.0);

            float shadowFallOff = 1.0;
            #if defined(SPOT_LIGHT_SHADOWMAP_NUMBER)
                if( shadowEnabled ){
                    shadowFallOff = shadowFallOffs[i];
                }
            #endif

            diffuseColor += lightColor * ndl * attenuation * (1.0-falloff) * shadowFallOff;

        }
    #endif

    gl_FragColor.xyz *= diffuseColor;
    if( lineWidth > 0.01){
        gl_FragColor.xyz = gl_FragColor.xyz * mix(lineColor, vec3(1.0), edgeFactor(lineWidth));
    }

}

@end