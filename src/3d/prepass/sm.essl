/**
 * NORMAL
 */
@export buildin.sm.depth.vertex

uniform mat4 worldViewProjection : WORLDVIEWPROJECTION;

attribute vec3 position : POSITION;
varying vec4 v_ViewPosition;
void main(){

    v_ViewPosition = worldViewProjection * vec4( position, 1.0 );
    gl_Position = worldViewProjection * vec4( position , 1.0 );

}
@end
////////////////////////////////////////////////////////////////
@export buildin.sm.depth.fragment

varying vec4 v_ViewPosition;

@import buildin.util.pack_depth

void main(){
    // Whats the difference between gl_FragCoord.z and this v_ViewPosition
    // gl_FragCoord consider the polygon offset ?
    float z = v_ViewPosition.z / v_ViewPosition.w;

    gl_FragColor = packDepth(z);
}
@end



@export buildin.sm.distance.vertex

uniform mat4 worldViewProjection : WORLDVIEWPROJECTION;
uniform mat4 world : WORLD;

attribute vec3 position : POSITION;

varying vec3 v_WorldPosition;

void main(){

    gl_Position = worldViewProjection * vec4( position , 1.0 );
    v_WorldPosition = ( world * vec4(position, 1.0) ).xyz;
}

@end

@export buildin.sm.distance.fragment

uniform vec3 lightPosition;

varying vec3 v_WorldPosition;

@import buildin.util.pack_depth

void main(){

    float dist = distance(lightPosition, v_WorldPosition);

    gl_FragColor = packDepth( dist );
}
@end

/**
 * PCF
 */


////////////////////////////////////////////////////////////////
@export buildin.plugin.compute_shadow_map

#if defined(SPOT_LIGHT_SHADOWMAP_NUMBER) || defined(DIRECTIONAL_LIGHT_SHADOWMAP_NUMBER) || defined(POINT_LIGHT_SHADOWMAP_NUMBER)

#ifdef SPOT_LIGHT_SHADOWMAP_NUMBER
uniform sampler2D spotLightShadowMap[ SPOT_LIGHT_SHADOWMAP_NUMBER ];
uniform mat4 spotLightMatrix[ SPOT_LIGHT_SHADOWMAP_NUMBER ]; 
#endif

#ifdef DIRECTIONAL_LIGHT_SHADOWMAP_NUMBER
uniform sampler2D directionalLightShadowMap[ DIRECTIONAL_LIGHT_SHADOWMAP_NUMBER ];
uniform mat4 directionalLightMatrix[ DIRECTIONAL_LIGHT_SHADOWMAP_NUMBER ];
#endif

#ifdef POINT_LIGHT_SHADOWMAP_NUMBER
uniform samplerCube pointLightShadowMap[ POINT_LIGHT_SHADOWMAP_NUMBER ];
#endif

uniform bool shadowEnabled : true;

// Normal
@import buildin.util.unpack_depth

#if defined(DIRECTIONAL_LIGHT_NUMBER) || defined(SPOT_LIGHT_SHADOWMAP_NUMBER)

float computeShadowFalloff(sampler2D map, mat4 lightVPM, vec3 position){
    float shadowFallOff = 1.0;
    vec4 posInLightSpace = ( lightVPM * vec4(v_WorldPosition, 1.0) );
    posInLightSpace.xyz /= posInLightSpace.w;
    // In frustum
    if( all(greaterThan(posInLightSpace.xyz, vec3(-1.0))) &&
        all(lessThan(posInLightSpace.xyz, vec3(1.0))) ){
        // To texture uv
        vec2 uv = (posInLightSpace.xy+1.0) / 2.0;
        vec4 shadowTex = texture2D( map, uv );
        float z = unpackDepth(shadowTex) ;
        
        if( z + 0.0025 < posInLightSpace.z ){
            shadowFallOff = 0.2;
        }
    }
    return shadowFallOff;
}

#endif

#ifdef POINT_LIGHT_SHADOWMAP_NUMBER

float computeShadowFallOfCube( samplerCube map, vec3 direction ){
    vec4 shadowTex = textureCube(map, direction);
    float dist = length(direction);

    if( unpackDepth(shadowTex) + 0.001 < dist ){
        return 0.0;
    }else{
        return 1.0;
    }
}
#endif

#if defined(SPOT_LIGHT_SHADOWMAP_NUMBER)

void computeShadowFallOfSpotLights( vec3 position, inout float shadowFalloffs[SPOT_LIGHT_NUMBER]  ){
    for( int i = 0; i < SPOT_LIGHT_SHADOWMAP_NUMBER; i++){
        float shadowFalloff = computeShadowFalloff( spotLightShadowMap[i], spotLightMatrix[i], position );
        shadowFalloffs[ i ] = shadowFalloff;
    }
    // set default fallof of rest lights
    for( int i = SPOT_LIGHT_SHADOWMAP_NUMBER; i < SPOT_LIGHT_NUMBER; i++){
        shadowFalloffs[i] = 1.0;
    }
}

#endif


#if defined(POINT_LIGHT_SHADOWMAP_NUMBER)

void computeShadowFallOfPointLights( vec3 position, inout float shadowFalloffs[POINT_LIGHT_NUMBER]  ){
    for( int i = 0; i < POINT_LIGHT_SHADOWMAP_NUMBER; i++){
        vec3 lightPosition = pointLightPosition[i];
        vec3 direction = position - lightPosition;
        shadowFalloffs[ i ] = computeShadowFallOfCube( pointLightShadowMap[i], direction );
    }
    for( int i = POINT_LIGHT_SHADOWMAP_NUMBER; i < POINT_LIGHT_NUMBER; i++){
        shadowFalloffs[i] = 1.0;
    }
}

#endif


#if defined(DIRECTIONAL_LIGHT_SHADOWMAP_NUMBER)

void computeShadowFallOfDirectionalLights( vec3 position, inout float shadowFalloffs[DIRECTIONAL_LIGHT_NUMBER] ){
    for( int i = 0; i < DIRECTIONAL_LIGHT_SHADOWMAP_NUMBER; i++){
        float shadowFalloff = computeShadowFalloff( directionalLightShadowMap[i], directionalLightMatrix[i], position );
        shadowFalloffs[ i ] = shadowFalloff;
    }
    // set default fallof of rest lights
    for( int i = DIRECTIONAL_LIGHT_SHADOWMAP_NUMBER; i < DIRECTIONAL_LIGHT_NUMBER; i++){
        shadowFalloffs[i] = 1.0;
    }
}

#endif

#endif

@end