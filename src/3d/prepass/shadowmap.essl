/**
 * NORMAL
 */
@export buildin.sm.depth.vertex

uniform mat4 worldViewProjection : WORLDVIEWPROJECTION;

attribute vec3 position : POSITION;

#ifdef SKINNING
attribute vec3 boneWeight;
attribute vec4 boneIndex;

uniform mat4 boneMatrices[ BONE_MATRICES_NUMBER ];
#endif

varying vec4 v_ViewPosition;
void main(){
    
    vec3 skinnedPosition = position;
    #ifdef SKINNING
        mat4 skinMatrix;
        if(boneIndex.x >= 0.0){
            skinMatrix = boneMatrices[int(boneIndex.x)] * boneWeight.x;
        }
        if(boneIndex.y >= 0.0){
            skinMatrix += boneMatrices[int(boneIndex.y)] * boneWeight.y;
        }
        if(boneIndex.z >= 0.0){
            skinMatrix += boneMatrices[int(boneIndex.z)] * boneWeight.z;
        }
        if(boneIndex.w >= 0.0){
            skinMatrix += boneMatrices[int(boneIndex.w)] * (1.0-boneWeight.x-boneWeight.y-boneWeight.z);
        }
        skinnedPosition = (skinMatrix * vec4(position, 1.0)).xyz;
    #endif

    v_ViewPosition = worldViewProjection * vec4(skinnedPosition, 1.0);
    gl_Position = v_ViewPosition;

}
@end
////////////////////////////////////////////////////////////////
@export buildin.sm.depth.fragment

varying vec4 v_ViewPosition;

#ifdef USE_VSM
#extension GL_OES_standard_derivatives : enable
#endif

@import buildin.util.pack_depth

void main(){
    // Whats the difference between gl_FragCoord.z and this v_ViewPosition
    // gl_FragCoord consider the polygon offset ?
    float depth = v_ViewPosition.z / v_ViewPosition.w;

    #ifdef USE_VSM
        depth = depth * 0.5 + 0.5;

        float moment1 = depth;
        float moment2 = depth * depth;

        // Adjusting moments using partial derivative
        float dx = dFdx(depth);
        float dy = dFdy(depth);
        moment2 += 0.25*(dx*dx+dy*dy);

        gl_FragColor = vec4(moment1, moment2, 0.0, 0.0);
    #else
        gl_FragColor = packDepth((depth + 1.0) / 2.0);
    #endif
}
@end



@export buildin.sm.distance.vertex

uniform mat4 worldViewProjection : WORLDVIEWPROJECTION;
uniform mat4 world : WORLD;

attribute vec3 position : POSITION;

#ifdef SKINNING
attribute vec3 boneWeight;
attribute vec4 boneIndex;

uniform mat4 boneMatrices[ BONE_MATRICES_NUMBER ];
#endif

varying vec3 v_WorldPosition;

void main(){

    vec3 skinnedPosition = position;
    #ifdef SKINNING
        mat4 skinMatrix;
        if(boneIndex.x >= 0.0){
            skinMatrix = boneMatrices[int(boneIndex.x)] * boneWeight.x;
        }
        if(boneIndex.y >= 0.0){
            skinMatrix += boneMatrices[int(boneIndex.y)] * boneWeight.y;
        }
        if(boneIndex.z >= 0.0){
            skinMatrix += boneMatrices[int(boneIndex.z)] * boneWeight.z;
        }
        if(boneIndex.w >= 0.0){
            skinMatrix += boneMatrices[int(boneIndex.w)] * (1.0-boneWeight.x-boneWeight.y-boneWeight.z);
        }
        skinnedPosition = (skinMatrix * vec4(position, 1.0)).xyz;
    #endif

    gl_Position = worldViewProjection * vec4( skinnedPosition , 1.0 );
    v_WorldPosition = ( world * vec4(skinnedPosition, 1.0) ).xyz;
}

@end

@export buildin.sm.distance.fragment

uniform vec3 lightPosition;
uniform float range : 100;

varying vec3 v_WorldPosition;

@import buildin.util.pack_depth

void main(){
    float dist = distance(lightPosition, v_WorldPosition);
    #ifdef USE_VSM
        gl_FragColor = vec4(dist, dist * dist, 0.0, 0.0);
    #else
        dist = dist / range;
        gl_FragColor = packDepth(dist);
    #endif
}
@end

////////////////////////////////////////////////////////////////
@export buildin.plugin.compute_shadow_map

#if defined(SPOT_LIGHT_SHADOWMAP_NUMBER) || defined(DIRECTIONAL_LIGHT_SHADOWMAP_NUMBER) || defined(POINT_LIGHT_SHADOWMAP_NUMBER)

#ifdef SPOT_LIGHT_SHADOWMAP_NUMBER
uniform sampler2D spotLightShadowMaps[ SPOT_LIGHT_SHADOWMAP_NUMBER ];
uniform mat4 spotLightMatrices[ SPOT_LIGHT_SHADOWMAP_NUMBER ];
uniform float spotLightBiases[ SPOT_LIGHT_SHADOWMAP_NUMBER ];
#endif

#ifdef DIRECTIONAL_LIGHT_SHADOWMAP_NUMBER
uniform sampler2D directionalLightShadowMaps[ DIRECTIONAL_LIGHT_SHADOWMAP_NUMBER ];
uniform mat4 directionalLightMatrices[ DIRECTIONAL_LIGHT_SHADOWMAP_NUMBER ];
uniform float directionalLightBiases[ DIRECTIONAL_LIGHT_SHADOWMAP_NUMBER ];
#endif

#ifdef POINT_LIGHT_SHADOWMAP_NUMBER
uniform samplerCube pointLightShadowMaps[POINT_LIGHT_SHADOWMAP_NUMBER];
uniform float pointLightRanges[POINT_LIGHT_SHADOWMAP_NUMBER];
#endif

uniform bool shadowEnabled : true;

// Normal
@import buildin.util.unpack_depth

#if defined(DIRECTIONAL_LIGHT_NUMBER) || defined(SPOT_LIGHT_SHADOWMAP_NUMBER)

float shadowContrib(sampler2D map, vec2 uv, float z, float bias){
    vec4 tex = texture2D(map, uv);
    return (unpackDepth(tex) * 2.0 - 1.0) + bias < z ? 0.0 : 1.0;
}

float pcf(sampler2D map, vec2 uv, float z, float bias){

    float shadowFalloff = shadowContrib(map, uv, z, bias);
    float offset = 1.0/512.0;
    shadowFalloff += shadowContrib(map, uv+vec2(offset, 0.0), z, bias);
    shadowFalloff += shadowContrib(map, uv+vec2(offset, offset), z, bias);
    shadowFalloff += shadowContrib(map, uv+vec2(-offset, offset), z, bias);
    shadowFalloff += shadowContrib(map, uv+vec2(0.0, offset), z, bias);
    shadowFalloff += shadowContrib(map, uv+vec2(-offset, 0.0), z, bias);
    shadowFalloff += shadowContrib(map, uv+vec2(-offset, -offset), z, bias);
    shadowFalloff += shadowContrib(map, uv+vec2(offset, -offset), z, bias);
    shadowFalloff += shadowContrib(map, uv+vec2(0.0, -offset), z, bias);

    return shadowFalloff / 9.0;
}
float chebyshevUpperBound(vec2 moments, float z){
    float p = 0.0;
    // if (z >= moments.x) {
    //     p = 1.0;
    // }
    float variance = moments.y - moments.x * moments.x;
    variance = max(variance, 0.000000001);
    z = z * 0.5 + 0.5;
    // Compute probabilistic upper bound. 
    float mD = moments.x - z;
    float p_max = variance / (variance + mD * mD);
    return max(p_max, p);
}
float computeShadowFalloff(sampler2D map, mat4 lightVPM, vec3 position, float bias){
    
    vec4 posInLightSpace = lightVPM * vec4(v_WorldPosition, 1.0);
    posInLightSpace.xyz /= posInLightSpace.w;
    float z = posInLightSpace.z;
    // In frustum
    if(all(greaterThan(posInLightSpace.xyz, vec3(-1.0))) &&
        all(lessThan(posInLightSpace.xyz, vec3(1.0)))){
        // To texture uv
        vec2 uv = (posInLightSpace.xy+1.0) / 2.0;

        #ifdef USE_VSM
            vec2 moments = texture2D(map, uv).xy;
            return chebyshevUpperBound(moments, z);
        #else
            return pcf(map, uv, z, bias);
        #endif
    }
    return 1.0;
}

#endif

#ifdef POINT_LIGHT_SHADOWMAP_NUMBER

float computeShadowFallOfCube(samplerCube map, vec3 direction, float range){
    vec4 shadowTex = textureCube(map, direction);
    float dist = length(direction);

    #ifdef USE_VSM
        vec2 moments = shadowTex.xy;
        float variance = moments.y - moments.x * moments.x;
        float mD = moments.x - dist;
        float p = variance / (variance + mD * mD);
        if(moments.x + 0.001 < dist){
            return clamp(p, 0.0, 1.0);
        }else{
            return 1.0;
        }
    #else
        if(unpackDepth(shadowTex) * range + 0.002 < dist){
            return 0.0;
        }else{
            return 1.0;
        }
    #endif
}
#endif

#if defined(SPOT_LIGHT_SHADOWMAP_NUMBER)

void computeShadowFallOfSpotLights( vec3 position, inout float shadowFalloffs[SPOT_LIGHT_NUMBER]  ){
    for( int i = 0; i < SPOT_LIGHT_SHADOWMAP_NUMBER; i++){
        float shadowFalloff = computeShadowFalloff( spotLightShadowMaps[i], spotLightMatrices[i], position, spotLightBiases[i] );
        shadowFalloffs[ i ] = shadowFalloff;
    }
    // set default fallof of rest lights
    for( int i = SPOT_LIGHT_SHADOWMAP_NUMBER; i < SPOT_LIGHT_NUMBER; i++){
        shadowFalloffs[i] = 1.0;
    }
}

#endif


#if defined(DIRECTIONAL_LIGHT_SHADOWMAP_NUMBER)

void computeShadowFallOfDirectionalLights( vec3 position, inout float shadowFalloffs[DIRECTIONAL_LIGHT_NUMBER] ){
    for( int i = 0; i < DIRECTIONAL_LIGHT_SHADOWMAP_NUMBER; i++){
        float shadowFalloff = computeShadowFalloff(directionalLightShadowMaps[i], directionalLightMatrices[i], position, directionalLightBiases[i]);
        shadowFalloffs[i] = shadowFalloff;
    }
    // set default fallof of rest lights
    for( int i = DIRECTIONAL_LIGHT_SHADOWMAP_NUMBER; i < DIRECTIONAL_LIGHT_NUMBER; i++){
        shadowFalloffs[i] = 1.0;
    }
}

#endif


#if defined(POINT_LIGHT_SHADOWMAP_NUMBER)

void computeShadowFallOfPointLights( vec3 position, inout float shadowFalloffs[POINT_LIGHT_NUMBER]  ){
    for( int i = 0; i < POINT_LIGHT_SHADOWMAP_NUMBER; i++){
        vec3 lightPosition = pointLightPosition[i];
        vec3 direction = position - lightPosition;
        shadowFalloffs[i] = computeShadowFallOfCube(pointLightShadowMaps[i], direction, pointLightRanges[i]);
    }
    for( int i = POINT_LIGHT_SHADOWMAP_NUMBER; i < POINT_LIGHT_NUMBER; i++){
        shadowFalloffs[i] = 1.0;
    }
}

#endif

#endif

@end